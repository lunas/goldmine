{"name":"Goldmine","body":"# Goldmine\r\n\r\n## Pivot tables for the Rubyist\r\n\r\n### Pivot any list into a wealth of information.\r\n\r\nGoldmine allows you to apply pivot table logic to any list for powerful data mining capabilities.\r\n\r\n### Reasons to love it\r\n\r\n* Provides ETL like functionality... but simple and elegant\r\n* Easily build OLAP cubes using Ruby\r\n* Supports method chaining for deep data mining\r\n* Handles values that are lists themselves\r\n\r\n[Why use it?](#putting-it-all-together)\r\n\r\n## Quick start\r\n\r\nInstall\r\n\r\n```\r\n$gem install goldmine\r\n```\r\n\r\nUse\r\n\r\n```ruby\r\n[1,2,3,4,5,6,7,8,9].pivot { |i| i < 5 }\r\n```\r\n\r\n### Usage examples\r\n\r\n* [Pivot a list](#pivot-a-list-of-numbers-based-on-whether-or-not-they-are-less-than-5)\r\n* [Create a named pivot](#explicitly-name-a-pivot)\r\n* [Pivot values that are lists themselves](#pivot-values-that-are-lists-themselves)\r\n* [Chain pivots](#chain-pivots-together)\r\n* [Chain pivots conditionally](#conditionally-chain-pivots-together)\r\n* [Dig deep and extract meaningful data](#deep-cuts)\r\n\r\n## The Basics\r\n\r\n### Pivot a list of numbers based on whether or not they are less than 5\r\n\r\n```ruby\r\n# operation\r\nlist = [1,2,3,4,5,6,7,8,9]\r\ndata = list.pivot { |i| i < 5 }\r\n\r\n# resulting data\r\n{\r\n  true  => [1, 2, 3, 4],\r\n  false => [5, 6, 7, 8, 9]\r\n}\r\n```\r\n\r\n### Explicitly name a pivot\r\n\r\n```ruby\r\n# operation\r\nlist = [1,2,3,4,5,6,7,8,9]\r\ndata = list.pivot(\"less than 5\") { |i| i < 5 }\r\n\r\n# resulting data\r\n{\r\n  { \"less than 5\" => true }  => [1, 2, 3, 4],\r\n  { \"less than 5\" => false } => [5, 6, 7, 8, 9]\r\n}\r\n```\r\n\r\n## Next Steps\r\n\r\n### Pivot values that are lists themselves\r\n\r\n```ruby\r\n# operation\r\nlist = [\r\n  { :name => \"one\",   :list => [1] },\r\n  { :name => \"two\",   :list => [1, 2] },\r\n  { :name => \"three\", :list => [1, 2, 3] },\r\n  { :name => \"four\",  :list => [1, 2, 3, 4] },\r\n]\r\ndata = list.pivot { |record| record[:list] }\r\n\r\n# resulting data\r\n{\r\n  1 => [ { :name => \"one\",   :list => [1] },\r\n         { :name => \"two\",   :list => [1, 2] },\r\n         { :name => \"three\", :list => [1, 2, 3] },\r\n         { :name => \"four\",  :list => [1, 2, 3, 4] } ],\r\n  2 => [ { :name => \"two\",   :list => [1, 2] },\r\n         { :name => \"three\", :list => [1, 2, 3] },\r\n         { :name => \"four\",  :list => [1, 2, 3, 4] } ],\r\n  3 => [ { :name => \"three\", :list => [1, 2, 3] },\r\n         { :name => \"four\",  :list => [1, 2, 3, 4] } ],\r\n  4 => [ { :name => \"four\",  :list => [1, 2, 3, 4] } ]\r\n}\r\n```\r\n\r\n### Chain pivots together\r\n\r\n```ruby\r\n# operation\r\nlist = [1,2,3,4,5,6,7,8,9]\r\ndata = list.pivot { |i| i < 5 }.pivot { |i| i % 2 == 0 }\r\n\r\n# resulting data\r\n{\r\n  [true, false]  => [1, 3],\r\n  [true, true]   => [2, 4],\r\n  [false, false] => [5, 7, 9],\r\n  [false, true]  => [6, 8]\r\n}\r\n```\r\n\r\n### Conditionally chain pivots together\r\n\r\n```ruby\r\n# operation\r\nparams = { :divisible_by_two => false, :next_greater_than_five => true }\r\nlist = [1,2,3,4,5,6,7,8,9]\r\ndata = list.pivot(\"less than 5\") { |i| i < 5 }\r\ndata = data.pivot(\"divisible by 2\") { |i| i % 2 == 0 } if params[:divisible_by_two]\r\ndata = data.pivot(\"next greater than 5\") { |i| i.next > 5 } if params[:next_greater_than_five]\r\n\r\n# resulting data\r\n{\r\n  { \"less than 5\" => true,  \"next greater than 5\" => false } => [1, 2, 3, 4],\r\n  { \"less than 5\" => false, \"next greater than 5\" => true } => [5, 6, 7, 8, 9]\r\n}\r\n```\r\n\r\n## Deep Cuts\r\n\r\n### Build a moderately complex dataset of Cities\r\n\r\n```ruby\r\ncities = [\r\n  { :name => \"San Francisco\",\r\n    :state => \"CA\",\r\n    :population => 805235,\r\n    :airlines => [ \"Delta\", \"United\", \"SouthWest\" ]\r\n  },\r\n  {\r\n    :name => \"Mountain View\",\r\n    :state => \"CA\",\r\n    :population => 74066,\r\n    :airlines => [ \"SkyWest\", \"United\", \"SouthWest\" ]\r\n  },\r\n  {\r\n    :name => \"Manhattan\",\r\n    :state => \"NY\",\r\n    :population => 1586698,\r\n    :airlines => [ \"Delta\", \"JetBlue\", \"United\" ]\r\n  },\r\n  {\r\n    :name => \"Brooklyn\",\r\n    :state => \"NY\",\r\n    :population => 2504700,\r\n    :airlines => [ \"Delta\", \"American\", \"US Airways\" ]\r\n  },\r\n  {\r\n    :name => \"Boston\",\r\n    :state => \"MA\",\r\n    :population => 617594,\r\n    :airlines => [ \"Delta\", \"JetBlue\", \"American\" ]\r\n  },\r\n  {\r\n    :name => \"Atlanta\",\r\n    :state => \"GA\",\r\n    :population => 420003,\r\n    :airlines => [ \"Delta\", \"United\", \"SouthWest\" ]\r\n  },\r\n  {\r\n    :name => \"Dallas\",\r\n    :state => \"TX\",\r\n    :population => 1197816,\r\n    :airlines => [ \"Delta\", \"SouthWest\", \"Frontier\" ]\r\n  }\r\n]\r\n```\r\n\r\n### Pivot cities by state for population over 750k\r\n\r\n```ruby\r\n# operation\r\ndata = cities\r\n  .pivot(\"state\") { |city| city[:state] }\r\n  .pivot(\"population >= 750k\") { |city| city[:population] >= 750000 }\r\n\r\n# resulting data\r\n{\r\n  { \"state\" => \"CA\", \"population >= 750k\" => true }  => [ { :name => \"San Francisco\", ... } ],\r\n  { \"state\" => \"CA\", \"population >= 750k\" => false } => [ { :name => \"Mountain View\", ... } ],\r\n  { \"state\" => \"NY\", \"population >= 750k\" => true }  => [ { :name => \"Manhattan\", ... }, { :name => \"Brooklyn\", ... } ],\r\n  { \"state\" => \"MA\", \"population >= 750k\" => false } => [ { :name => \"Boston\", ... } ],\r\n  { \"state\" => \"GA\", \"population >= 750k\" => false } => [ { :name => \"Atlanta\", ... } ],\r\n  { \"state\" => \"TX\", \"population >= 750k\" => true }  => [ { :name => \"Dallas\", ... } ]\r\n}\r\n```\r\n\r\n### Putting it all together\r\n\r\n**The end goal of all this is to support the creation of aggregate reports.**\r\n\r\n*You can think of these reports as individual data cubes.*\r\n\r\nHere is a table view of the pivoted city data from above.\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>state</th>\r\n      <th>population >= 750k</th>\r\n      <th>cities</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>CA</td>\r\n      <td>true</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>CA</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>NY</td>\r\n      <td>true</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>MA</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>GA</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>TX</td>\r\n      <td>true</td>\r\n      <td>1</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\nLets try another one.\r\n\r\n### Determine which airlines service cities with fewer than 750k people\r\n\r\n```ruby\r\n# operation\r\ndata = cities\r\n  .pivot(\"airline\") { |city| city[:airlines] }\r\n  .pivot(\"population < 750k\") { |city| city[:population] < 750000 }\r\n\r\n# resulting data\r\n{\r\n  { \"airline\" => \"Delta\", \"population < 750k\" => false } => [\r\n    { :name => \"San Francisco\", ... },\r\n    { :name => \"Manhattan\", ... },\r\n    { :name => \"Brooklyn\", ... },\r\n    { :name => \"Dallas\", ... }],\r\n  { \"airline\" => \"Delta\", \"population < 750k\" => true } => [\r\n    { :name => \"Boston\", ... },\r\n    { :name => \"Atlanta\", ... }],\r\n  { \"airline\" => \"United\", \"population < 750k\" => false } => [\r\n    { :name => \"San Francisco\", ... },\r\n    { :name => \"Manhattan\", ... }],\r\n  { \"airline\" => \"United\", \"population < 750k\" => true } => [\r\n    { :name => \"Mountain View\", ... },\r\n    { :name => \"Atlanta\", ... }],\r\n  { \"airline\" => \"SouthWest\", \"population < 750k\" => false } => [\r\n    { :name => \"San Francisco\", ... },\r\n    { :name => \"Dallas\", ... }],\r\n  { \"airline\" => \"SouthWest\", \"population < 750k\" => true } => [\r\n    { :name => \"Mountain View\", ... },\r\n    { :name => \"Atlanta\", ... }],\r\n  { \"airline\" => \"SkyWest\", \"population < 750k\" => true } => [\r\n    { :name => \"Mountain View\", ... }],\r\n  { \"airline\" => \"JetBlue\", \"population < 750k\" => false } => [\r\n    { :name => \"Manhattan\", ... }],\r\n  { \"airline\" => \"JetBlue\", \"population < 750k\" => true } => [\r\n    { :name => \"Boston\", ... }],\r\n  { \"airline\" => \"American\", \"population < 750k\" => false } => [\r\n    { :name => \"Brooklyn\", ... }],\r\n  { \"airline\" => \"American\", \"population < 750k\" => true } => [\r\n    { :name => \"Boston\", ... }],\r\n  { \"airline\" => \"US Airways\", \"population < 750k\" => false } => [\r\n    { :name => \"Brooklyn\", ... }],\r\n  { \"airline\" => \"Frontier\", \"population < 750k\" => false } => [\r\n    { :name => \"Dallas\", ... }]\r\n}\r\n```\r\n\r\nHere is the corresponding table view for the above dataset.\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>airline</th>\r\n      <th>population &lt; 750k</th>\r\n      <th>cities</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Delta</td>\r\n      <td>false</td>\r\n      <td>4</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Delta</td>\r\n      <td>true</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>United</td>\r\n      <td>false</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>United</td>\r\n      <td>true</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>SouthWest</td>\r\n      <td>false</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>SouthWest</td>\r\n      <td>true</td>\r\n      <td>2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>SkyWest</td>\r\n      <td>true</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>JetBlue</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>JetBlue</td>\r\n      <td>true</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>American</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>American</td>\r\n      <td>true</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>US Airways</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <td>Frontier</td>\r\n      <td>false</td>\r\n      <td>1</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\nHopefully you can see the potential even though the above examples are somewhat contrived.\r\n\r\n## Special thanks\r\n\r\n* One on One Marketing - for sponsoring the development of Goldmine\r\n* Eric Berry - for constructive feedback\r\n* Josh Bowles - for early adoption and feedback\r\n* Brett Beers - for early adoption and feedback\r\n","tagline":"Pivot tables for the Rubyist","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}